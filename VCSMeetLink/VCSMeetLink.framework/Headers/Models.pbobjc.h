// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: models.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Stream;
@class Wnd;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Command

typedef GPB_ENUM(Command) {
  /** 会议室状态通知 */
  Command_CmdRoomNotifyRoom = 1,

  /** 成员状态通知 */
  Command_CmdRoomNotifyAccount = 2,

  /** 被踢通知 */
  Command_CmdRoomNotifyKickout = 3,

  /** 成员进入通知 */
  Command_CmdRoomNotifyEnter = 4,

  /** 成员退出通知 */
  Command_CmdRoomNotifyExit = 5,

  /** 会议开始通知 */
  Command_CmdRoomNotifyBegin = 6,

  /** 会议结束通知 */
  Command_CmdRoomNotifyEnded = 7,

  /** 我的状态变化通知 */
  Command_CmdRoomNotifyMyAccount = 8,

  /** 码流变化通知 */
  Command_CmdRoomNotifyStreamChanged = 9,

  /** 透传通知 */
  Command_CmdRoomNotifyPassthrough = 10,

  /** 主持人操作码流通知 */
  Command_CmdRoomNotifyHostCtrlStream = 11,

  /** 聊天消息 */
  Command_CmdRoomNotifyChat = 12,

  /** 举手发言的处理通知 */
  Command_CmdRoomNotifyHandUp = 13,

  /** dx 1.1.6增加通知类型 */
  Command_CmdRoomNotifyRoomRecoveryHost = 14,

  /** 转移主持人通知 */
  Command_CmdRoomNotifyRoomMoveHost = 15,

  /** 设置联席主持人通知 */
  Command_CmdRoomNotifyRoomUnionHost = 16,

  /** dx admin 1.2 增加房间内成员改名 */
  Command_CmdRoomSetMemberNameHost = 17,

  /** 1.3.0 增加通知 */
  Command_CmdRoomNotifyPrepare = 18,

  /** 会议更改通知 */
  Command_CmdRoomNotifyChange = 19,

  /** 会议延长通知(后台) */
  Command_CmdRoomNotifyExtend = 20,

  /** 会议MCU状态变更通知(后台) */
  Command_CmdRoomMcuChange = 21,

  /** 会议邀请列表变更通知(后台) */
  Command_CmdRoomInviteeChange = 22,

  /** MCU磁盘剩余空间不足状态变更通知(后台) */
  Command_CmdRoomMcuDisk = 23,

  /** 盒子6小时到期后10分钟通知一 下盒子 */
  Command_CmdRoomConferenceNotify = 24,

  /** 盒子入会前修改姓名 */
  Command_CmdRoomsNicknameUpdate = 25,

  /** 修改成员自定义信息 */
  Command_CmdRoomSetMemberExtendInfoHost = 26,

  /** MCU录制状态监控 */
  Command_CmdRoomMcuStatus = 27,

  /** 进入房间 */
  Command_CmdRoomEnter = 100,

  /** 退出房间 */
  Command_CmdRoomExit = 102,

  /** 心跳 */
  Command_CmdRoomHeartbeat = 103,

  /** 主持人禁用音视频 */
  Command_CmdRoomHostCtrl = 104,

  /** 主持人踢人 */
  Command_CmdRoomHostKickout = 105,

  /** 主持人打开关闭电子白板 */
  Command_CmdRoomHostWhiteBoard = 106,

  /** 推送码流发生变化 */
  Command_CmdRoomStreamChanged = 107,

  /** 透传 */
  Command_CmdRoomPassthrough = 108,

  /** 主持人操作码流 */
  Command_CmdRoomHostCtrlStream = 109,

  /** 发送聊天 */
  Command_CmdRoomChat = 110,

  /** 发起分享 */
  Command_CmdRoomStartToShare = 111,

  /** 停止分享 */
  Command_CmdRoomStopSharing = 112,

  /** 开关水印 */
  Command_CmdRoomSetWaterMark = 113,

  /** 主持人处理举手 */
  Command_CmdRoomHandUp = 114,

  /** 设置成员音视频状态 */
  Command_CmdRoomSetMemberState = 115,

  /** 设置房间音视频状态 */
  Command_CmdRoomSetRoomState = 116,

  /** 转移主持人 */
  Command_CmdRoomSetRoomMoveHost = 117,

  /** 设置联席主持人 */
  Command_CmdRoomSetRoomUnionHost = 118,

  /** 回收主持人 */
  Command_CmdRoomSetRoomRecoveryHost = 119,

  /** 设置主播 */
  Command_CmdRoomSetHosts = 120,

  /** 设置房间允许自行解除禁音 */
  Command_CmdRoomSetRelieveAstate = 121,

  /** 触发会议内账号状态回传 */
  Command_CmdRoomGetAccountStatus = 122,

  /** 后台禁用音视频 */
  Command_CmdRoomAdminCtrl = 200,

  /** 后台踢人 */
  Command_CmdRoomAdminKickout = 201,

  /** 后台开始会议 */
  Command_CmdRoomAdminBegin = 202,

  /** 后台结束会议 */
  Command_CmdRoomAdminEnd = 203,

  /** 后台控制窗口布局 */
  Command_CmdRoomAdminLayout = 204,

  /** 后台控制窗口布局通知 */
  Command_CmdRoomAdminLayoutNotify = 205,

  /** 接收聊天 */
  Command_CmdRoomXchatEvent = 301,

  /** 注册服务器心跳 */
  Command_CmdRegHeartbeat = 1000,

  /** 邀请入会请求 */
  Command_CmdRegInvite = 1001,

  /** 邀请入会通知 */
  Command_CmdRegInviteNotification = 1002,

  /** 邀请入会确认 */
  Command_CmdRegInviteConfirm = 1003,

  /** 邀请入会确认通知 */
  Command_CmdRegInviteConfirmNotification = 1004,

  /** 帐号离线 */
  Command_CmdRegOffline = 1005,

  /** 会议开始通知 */
  Command_CmdRegMeetingBeginNotification = 1006,

  /** 会议结束通知(新增),会议结束时推送 */
  Command_CmdRegMeetingEndNotification = 1007,

  /** 会议外邀请通知(新增),修改会议白名单时推送 */
  Command_CmdRegInviteConfNotice = 1008,

  /** 呼叫 */
  Command_CmdRegCall = 1010,

  /** 移除呼叫(历史问题) */
  Command_CmdRegCallCancel = 1011,

  /** 取消呼叫(新) */
  Command_CmdRegCallCancelNew = 1015,

  /** 移除呼叫(新) */
  Command_CmdRegCallRemove = 1016,

  /** 会议等候者上报自己的状态 */
  Command_CmdRegWaiting = 1012,

  /** 会议等候室广播 */
  Command_CmdRegWaitingBroadcast = 1013,

  /** 服务端更新等候者状态 */
  Command_CmdRegWaitingUpdate = 1014,

  /** 发送应用内推送 */
  Command_CmdRegPushRequest = 1020,

  /** 应用内推送通知 */
  Command_CmdRegPushNotification = 1021,

  /** 发送聊天 */
  Command_CmdRegChat = 1030,

  /** 聊天消息通知 */
  Command_CmdRegChatNotify = 1031,

  /** 聊天消息发送回执 */
  Command_CmdRegChatRsp = 1032,

  /** 聊天撤回通知 */
  Command_CmdRegChatRevokeNotify = 1033,

  /** 成员入会时静音：0-关闭  1-开启  2-人员超过6人 */
  Command_CmdRoomSetMute = 1034,

  /** =====================hiklink点对点呼叫========================== */
  Command_CmdConfTypeUpdateNotify = 1035,

  /** =====================ROOMS会议盒子绑定手机号========================== */
  Command_CmdRoomsAddMobileNotify = 1040,

  /** =====================ROOMS会议盒子解绑手机号========================== */
  Command_CmdRoomsChangeMobileNotify = 1041,

  /** =====================H5日志上传通知ROOMS========================== */
  Command_CmdRoomsAddLogNotify = 1042,

  /** =====================Rooms系统配置文件通知========================== */
  Command_CmdRoomsUpgradeFileNotify = 1043,

  /** =====================Rooms充值通知========================== */
  Command_CmdRoomsOrderPayNotify = 1044,

  /** =====================Rooms充值成功给盒子通知========================== */
  Command_CmdRoomsRechargeNotify = 1045,

  /** =====================Rooms能力不足给盒子通知========================== */
  Command_CmdRoomsInsufficientCapacity = 1046,

  /** =====================Rooms下发节目========================== */
  Command_CmdRoomsShowAddNotify = 1047,

  /** =====================Rooms删除节目========================== */
  Command_CmdRoomsShowDeleteNotify = 1048,

  /** =====================Rooms切换企业========================== */
  Command_CmdRoomsCorpChangeNotify = 1049,

  /** 将数据通过服务透传到指定的帐号(非MQTT连接的客户端用) */
  Command_CmdTransparent = 2000,

  /** 被踢离开会议通知 */
  Command_CmdRoomNotifyKickoutExit = 1500,

  /** --------------------网络研讨会相关指令开始-----------------------------/ */
  Command_CmdWebinarNotifyRole = 1600,

  /** --------------------网络研讨会相关指令结束-----------------------------/ */
  Command_CmdWebinarNotifyAudienceNum = 1601,
};

GPBEnumDescriptor *Command_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Command_IsValidValue(int32_t value);

#pragma mark - Enum Result

typedef GPB_ENUM(Result) {
  /** 成功 */
  Result_ResultOk = 0,

  /** 未知错误 */
  Result_ResultError = 1,

  /** token无效 */
  Result_ResultCheckTokenError = 2,

  /** 帐号不存在 */
  Result_ResultAccountNotFound = 3,

  /** 房间不存在 */
  Result_ResultRoomNotFound = 4,

  /** 房间已关闭 */
  Result_ResultRoomClosed = 5,

  /** 本地超时 */
  Result_ResultLocalTimeout = -11,

  /** 流媒体超时 */
  Result_ResultVtduTimeout = -12,
};

GPBEnumDescriptor *Result_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Result_IsValidValue(int32_t value);

#pragma mark - Enum OnlineState

/** 在线状态 */
typedef GPB_ENUM(OnlineState) {
  OnlineState_OsOffline = 0,
  OnlineState_OsOnline = 1,
};

GPBEnumDescriptor *OnlineState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OnlineState_IsValidValue(int32_t value);

#pragma mark - Enum PacketType

/** 报文类型 */
typedef GPB_ENUM(PacketType) {
  PacketType_PtNotify = 0,
  PacketType_PtRequest = 1,
  PacketType_PtResponse = 2,
};

GPBEnumDescriptor *PacketType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PacketType_IsValidValue(int32_t value);

#pragma mark - Enum ServerType

/** 服务类型 */
typedef GPB_ENUM(ServerType) {
  ServerType_StUnknown = 0,

  /** 注册服务 */
  ServerType_StRegister = 1,

  /** 会控服务 */
  ServerType_StRoom = 2,

  /** 流媒体 */
  ServerType_StVtdu = 3,
  ServerType_StMqtt = 4,
  ServerType_StPicCache = 5,
};

GPBEnumDescriptor *ServerType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ServerType_IsValidValue(int32_t value);

#pragma mark - Enum OwnerType

/** 所有者类型 */
typedef GPB_ENUM(OwnerType) {
  OwnerType_OtUnknown = 0,

  /** 帐号 */
  OwnerType_OtAccount = 1,

  /** 会议 */
  OwnerType_OtConference = 2,

  /** 企业 */
  OwnerType_OtCorporation = 3,

  /** 直播间 */
  OwnerType_OtLive = 4,
};

GPBEnumDescriptor *OwnerType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OwnerType_IsValidValue(int32_t value);

#pragma mark - Enum DeviceState

/** 设备状态 */
typedef GPB_ENUM(DeviceState) {
  /** 正常 */
  DeviceState_DsActive = 0,

  /** 关闭 */
  DeviceState_DsClosed = 1,

  /** 被主持人禁用 */
  DeviceState_DsDisabled = 2,
};

GPBEnumDescriptor *DeviceState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DeviceState_IsValidValue(int32_t value);

#pragma mark - Enum WebinarState

/** 网络研讨会设置状态 */
typedef GPB_ENUM(WebinarState) {
  /** 正常 */
  WebinarState_WsActive = 0,

  /** 禁止嘉宾 */
  WebinarState_WsForbidGuest = 1,

  /** 禁止观众 */
  WebinarState_WsForbidAudience = 2,

  /** 禁止所有 */
  WebinarState_WsDisabled = 3,
};

GPBEnumDescriptor *WebinarState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL WebinarState_IsValidValue(int32_t value);

#pragma mark - Enum ConferenceRole

/** 会议角色 */
typedef GPB_ENUM(ConferenceRole) {
  /** 普通成员 */
  ConferenceRole_CrMember = 0,

  /** 创建者 */
  ConferenceRole_CrCreator = 1,

  /** 主持人 */
  ConferenceRole_CrHost = 2,

  /** 服务 */
  ConferenceRole_CrService = 3,

  /** /联席主持人 */
  ConferenceRole_CrUnionHost = 4,

  /** 企业外部联系人 */
  ConferenceRole_CrCorpExternal = 5,

  /** 观众 */
  ConferenceRole_CrAudience = 6,
};

GPBEnumDescriptor *ConferenceRole_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ConferenceRole_IsValidValue(int32_t value);

#pragma mark - Enum CorporationRole

/** 企业角色 */
typedef GPB_ENUM(CorporationRole) {
  /** 普通成员 */
  CorporationRole_CorpMember = 0,

  /** 创建者 */
  CorporationRole_CorpCreator = 1,

  /** 管理员 */
  CorporationRole_CorpAdmin = 2,
};

GPBEnumDescriptor *CorporationRole_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CorporationRole_IsValidValue(int32_t value);

#pragma mark - Enum AccountType

/** 帐号类型 */
typedef GPB_ENUM(AccountType) {
  AccountType_AtUnknown = 0,

  /** 帐号 */
  AccountType_AtAccount = 1,

  /** 终端 */
  AccountType_AtTerminal = 2,

  /** 服务 */
  AccountType_AtService = 3,

  /** SIP直连设备 */
  AccountType_AtSipGate = 4,
  AccountType_AtRtsp = 5,
  AccountType_AtSipReg = 6,
  AccountType_AtH323Gate = 7,
  AccountType_AtH323Reg = 8,

  /** 萤石监控相机 */
  AccountType_AtEzvizcamera = 9,

  /** rooms盒子 */
  AccountType_AtRooms = 10,
};

GPBEnumDescriptor *AccountType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AccountType_IsValidValue(int32_t value);

#pragma mark - Enum TerminalGroupType

/** 终端种类 */
typedef GPB_ENUM(TerminalGroupType) {
  TerminalGroupType_Unknown = 0,

  /** PC端 */
  TerminalGroupType_Pc = 1,

  /** 移动端 */
  TerminalGroupType_Mobile = 2,

  /** 嵌入式 */
  TerminalGroupType_Embedded = 3,
};

GPBEnumDescriptor *TerminalGroupType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TerminalGroupType_IsValidValue(int32_t value);

#pragma mark - Enum TerminalType

/** 终端类型 */
typedef GPB_ENUM(TerminalType) {
  TerminalType_TerminalUnknown = 0,
  TerminalType_TerminalPc = 1,
  TerminalType_TerminalAndroid = 2,
  TerminalType_TerminalIos = 3,

  /** 安卓一体机 */
  TerminalType_TerminalEmbeddedAndroid = 4,

  /** 录播主机 */
  TerminalType_TerminalEmbedded = 5,

  /** 视频会议硬终端 */
  TerminalType_TerminalMeetingTerminal = 6,

  /** 安卓大屏 */
  TerminalType_TerminalAdnroidHd = 7,

  /** WebRTC */
  TerminalType_TerminalWebRtc = 8,

  /** 微信小程序 */
  TerminalType_TerminalWxXcx = 9,

  /** SIP直连设备 */
  TerminalType_TerminalSipGate = 12,

  /** SIP注册设备 */
  TerminalType_TerminalSipReg = 13,

  /** H.323直连设备 */
  TerminalType_TerminalH323Gate = 14,

  /** H.323注册设备 */
  TerminalType_TerminalH323Reg = 15,

  /** RTSP设备 */
  TerminalType_TerminalRtspDevice = 16,

  /** MacOS */
  TerminalType_TerminalMacOs = 17,

  /** 萤石监控相机 */
  TerminalType_TerminalEzvizcamera = 18,

  /** Rooms盒子 */
  TerminalType_TerminalRooms = 19,
};

GPBEnumDescriptor *TerminalType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TerminalType_IsValidValue(int32_t value);

#pragma mark - Enum ConferenceType

/** 会议类型 */
typedef GPB_ENUM(ConferenceType) {
  ConferenceType_CtUnknown = 0,
  ConferenceType_CtImmediate = 1,
  ConferenceType_CtScheduled = 2,
};

GPBEnumDescriptor *ConferenceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ConferenceType_IsValidValue(int32_t value);

#pragma mark - Enum ConferenceState

/** 会议状态 */
typedef GPB_ENUM(ConferenceState) {
  ConferenceState_CsPreparing = 0,
  ConferenceState_CsInProgress = 1,
  ConferenceState_CsClosed = 2,
};

GPBEnumDescriptor *ConferenceState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ConferenceState_IsValidValue(int32_t value);

#pragma mark - Enum Codec

/** 编码类型 */
typedef GPB_ENUM(Codec) {
  Codec_CodecH264 = 1,
  Codec_CodecH265 = 2,
};

GPBEnumDescriptor *Codec_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Codec_IsValidValue(int32_t value);

#pragma mark - Enum ChannelType

/** 通道类型 */
typedef GPB_ENUM(ChannelType) {
  /** 默认 */
  ChannelType_CtDefault = 0,

  /** IPC网络通道 */
  ChannelType_CtIpc = 1,

  /** 模拟通道 */
  ChannelType_CtAnalog = 2,

  /** 导播 */
  ChannelType_CtDirector = 3,

  /** 课件 */
  ChannelType_CtCourseware = 4,

  /** 屏幕共享 */
  ChannelType_CtScreen = 5,
};

GPBEnumDescriptor *ChannelType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ChannelType_IsValidValue(int32_t value);

#pragma mark - Enum LinkType

/** 连线模式 */
typedef GPB_ENUM(LinkType) {
  /** 帐号连线 */
  LinkType_LinkTypeAccount = 1,

  /** 会议连线 */
  LinkType_LinkTypeConference = 2,

  /** 直播连线 */
  LinkType_LinkTypeLive = 3,
};

GPBEnumDescriptor *LinkType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LinkType_IsValidValue(int32_t value);

#pragma mark - Enum StreamType

/** 码流类型 */
typedef GPB_ENUM(StreamType) {
  /** 主流 */
  StreamType_StreamMain = 0,

  /** 子流 */
  StreamType_StreamSub = 1,
};

GPBEnumDescriptor *StreamType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL StreamType_IsValidValue(int32_t value);

#pragma mark - Enum Operation

/** 操作指令 */
typedef GPB_ENUM(Operation) {
  Operation_OperationRemove = 0,
  Operation_OperationAdd = 1,
  Operation_OperationUpdate = 2,
};

GPBEnumDescriptor *Operation_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Operation_IsValidValue(int32_t value);

#pragma mark - Enum InviteResponse

/** 邀请响应 */
typedef GPB_ENUM(InviteResponse) {
  InviteResponse_IrAccepted = 1,
  InviteResponse_IrRejected = 2,
  InviteResponse_IrBusy = 3,
  InviteResponse_IrCancel = 4,
};

GPBEnumDescriptor *InviteResponse_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL InviteResponse_IsValidValue(int32_t value);

#pragma mark - Enum ImDstType

typedef GPB_ENUM(ImDstType) {
  ImDstType_IdtAccount = 0,
  ImDstType_IdtGroup = 1,
};

GPBEnumDescriptor *ImDstType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ImDstType_IsValidValue(int32_t value);

#pragma mark - Enum MessageType

/** 消息类型 */
typedef GPB_ENUM(MessageType) {
  MessageType_MtText = 1,
  MessageType_MtPicture = 2,
  MessageType_MtAudio = 3,
  MessageType_MtVideo = 4,
  MessageType_MtFile = 5,
};

GPBEnumDescriptor *MessageType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MessageType_IsValidValue(int32_t value);

#pragma mark - Enum AccountMode

/** 帐号入会模式 */
typedef GPB_ENUM(AccountMode) {
  AccountMode_AmNormal = 0,
  AccountMode_AmHidden = 1,
};

GPBEnumDescriptor *AccountMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AccountMode_IsValidValue(int32_t value);

#pragma mark - Enum SharingType

typedef GPB_ENUM(SharingType) {
  SharingType_StNone = 0,
  SharingType_StWhiteBoard = 1,
  SharingType_StPicture = 2,
  SharingType_StDesktop = 3,
  SharingType_StDesktopPicture = 4,
};

GPBEnumDescriptor *SharingType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SharingType_IsValidValue(int32_t value);

#pragma mark - Enum NetLevel

typedef GPB_ENUM(NetLevel) {
  NetLevel_NlLost = 0,
  NetLevel_NlBad = 1,
  NetLevel_NlLow = 2,
  NetLevel_NlNormal = 3,
  NetLevel_NlGood = 4,
};

GPBEnumDescriptor *NetLevel_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL NetLevel_IsValidValue(int32_t value);

#pragma mark - Enum SdkNetType

typedef GPB_ENUM(SdkNetType) {
  SdkNetType_DotUdp = 0,
  SdkNetType_DotWs = 1,
  SdkNetType_DotMqtt = 2,
  SdkNetType_DotRedisQueue = 3,
};

GPBEnumDescriptor *SdkNetType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SdkNetType_IsValidValue(int32_t value);

#pragma mark - Enum HandUpStatus

typedef GPB_ENUM(HandUpStatus) {
  HandUpStatus_HusNone = 0,

  /** 解除禁言请求 */
  HandUpStatus_HusLiftTheBan = 1,
};

GPBEnumDescriptor *HandUpStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL HandUpStatus_IsValidValue(int32_t value);

#pragma mark - Enum MoveHostState

typedef GPB_ENUM(MoveHostState) {
  /** 正常 */
  MoveHostState_Active = 0,

  /** 禁用 */
  MoveHostState_Disabled = 1,
};

GPBEnumDescriptor *MoveHostState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MoveHostState_IsValidValue(int32_t value);

#pragma mark - Enum RelieveAstate

/** 解除禁音状态 */
typedef GPB_ENUM(RelieveAstate) {
  /** 允许成员自行解除禁音 */
  RelieveAstate_RelieveAstateActive = 0,

  /** 不允许解除禁音 */
  RelieveAstate_RelieveAstateDisabled = 1,
};

GPBEnumDescriptor *RelieveAstate_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RelieveAstate_IsValidValue(int32_t value);

#pragma mark - Enum MuteState

typedef GPB_ENUM(MuteState) {
  /** 0-关闭 */
  MuteState_MuteDisabled = 0,

  /** 1-开启 */
  MuteState_MuteActive = 1,

  /** 2-人员超过6人 */
  MuteState_MuteMore = 2,
};

GPBEnumDescriptor *MuteState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MuteState_IsValidValue(int32_t value);

#pragma mark - Enum RoomMode

typedef GPB_ENUM(RoomMode) {
  RoomMode_RoomModeSfu = 1,
  RoomMode_RoomModeMcu = 2,
};

GPBEnumDescriptor *RoomMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RoomMode_IsValidValue(int32_t value);

#pragma mark - Enum McuMode

typedef GPB_ENUM(McuMode) {
  McuMode_McuModeNone = 0,
  McuMode_McuModeRecord = 1,
  McuMode_McuModeMcu = 2,
  McuMode_McuModeRtmp = 4,
  McuMode_McuModeRecordHls = 8,
  McuMode_McuModeThree = 3,
  McuMode_McuModeFive = 5,
  McuMode_McuModeSix = 6,
  McuMode_McuModeSeven = 7,
  McuMode_McuModeNine = 9,
  McuMode_McuModeTen = 10,
  McuMode_McuModeEleven = 11,
  McuMode_McuModeTwelve = 12,
  McuMode_McuModeThirteen = 13,
  McuMode_McuModeFourteen = 14,
  McuMode_McuModeFifteen = 15,
};

GPBEnumDescriptor *McuMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL McuMode_IsValidValue(int32_t value);

#pragma mark - Enum McuStatus

/** MCU状态 */
typedef GPB_ENUM(McuStatus) {
  McuStatus_McuSuccess = 0,
  McuStatus_McuFail = 1,
};

GPBEnumDescriptor *McuStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL McuStatus_IsValidValue(int32_t value);

#pragma mark - Enum OnlineStatus

/** 账号在线状态 */
typedef GPB_ENUM(OnlineStatus) {
  /** 下线 */
  OnlineStatus_OnlineDisabled = 0,

  /** 上线 */
  OnlineStatus_OnlineActive = 1,
};

GPBEnumDescriptor *OnlineStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OnlineStatus_IsValidValue(int32_t value);

#pragma mark - Enum PushMsgType

typedef GPB_ENUM(PushMsgType) {
  PushMsgType_PmtInvite = 0,
  PushMsgType_PmtChat = 1,
};

GPBEnumDescriptor *PushMsgType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PushMsgType_IsValidValue(int32_t value);

#pragma mark - Enum ChatResult

typedef GPB_ENUM(ChatResult) {
  ChatResult_ChatOk = 0,
  ChatResult_ChatError = 1,
  ChatResult_ChatBlacklist = 2,
  ChatResult_ChatForbidden = 3,
};

GPBEnumDescriptor *ChatResult_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ChatResult_IsValidValue(int32_t value);

#pragma mark - Enum ExternalMemberLimit

/** 外部联系人入会类型限制(0：不允许外部联系人入会;1:允许外部联系人入会；2：仅受邀外部联系人入会) */
typedef GPB_ENUM(ExternalMemberLimit) {
  /** 不允许外部联系人入会 */
  ExternalMemberLimit_NotAllow = 0,

  /** 允许外部联系人入会 */
  ExternalMemberLimit_Allow = 1,

  /** 仅受邀外部联系人入会 */
  ExternalMemberLimit_OnlyInviteAllow = 2,
};

GPBEnumDescriptor *ExternalMemberLimit_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ExternalMemberLimit_IsValidValue(int32_t value);

#pragma mark - Enum InsideWaitingRoomState

/** 内部成员是否开启等候室(0：关闭;1:开启;) */
typedef GPB_ENUM(InsideWaitingRoomState) {
  /** 关闭 */
  InsideWaitingRoomState_InsideClose = 0,

  /** 开启 */
  InsideWaitingRoomState_InsideOpen = 1,
};

GPBEnumDescriptor *InsideWaitingRoomState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL InsideWaitingRoomState_IsValidValue(int32_t value);

#pragma mark - Enum ExternalWaitingRoomState

/** 外部联系人是否开启等候室(0：关闭;1:开启;) */
typedef GPB_ENUM(ExternalWaitingRoomState) {
  /** 关闭 */
  ExternalWaitingRoomState_ExternalClose = 0,

  /** 开启 */
  ExternalWaitingRoomState_ExternalOpen = 1,
};

GPBEnumDescriptor *ExternalWaitingRoomState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ExternalWaitingRoomState_IsValidValue(int32_t value);

#pragma mark - ModelsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ModelsRoot : GPBRootObject
@end

#pragma mark - ServerBase

typedef GPB_ENUM(ServerBase_FieldNumber) {
  ServerBase_FieldNumber_Id_p = 1,
  ServerBase_FieldNumber_Name = 2,
  ServerBase_FieldNumber_Address = 3,
  ServerBase_FieldNumber_Port = 4,
  ServerBase_FieldNumber_State = 5,
  ServerBase_FieldNumber_UpdatedAt = 6,
  ServerBase_FieldNumber_Loading = 7,
  ServerBase_FieldNumber_Weight = 8,
  ServerBase_FieldNumber_Type = 9,
  ServerBase_FieldNumber_WsPort = 10,
  ServerBase_FieldNumber_WssPort = 11,
};

/**
 * 服务
 **/
GPB_FINAL @interface ServerBase : GPBMessage

/** 服务ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

/** 服务名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** 服务地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;
/** Test to see if @c address has been set. */
@property(nonatomic, readwrite) BOOL hasAddress;

/** 服务端口 */
@property(nonatomic, readwrite) int32_t port;

@property(nonatomic, readwrite) BOOL hasPort;
/** 在线状态 */
@property(nonatomic, readwrite) OnlineState state;

@property(nonatomic, readwrite) BOOL hasState;
/** 最后更新时间 */
@property(nonatomic, readwrite) uint64_t updatedAt;

@property(nonatomic, readwrite) BOOL hasUpdatedAt;
/** 负载量 */
@property(nonatomic, readwrite) int64_t loading;

@property(nonatomic, readwrite) BOOL hasLoading;
/** 权重比 */
@property(nonatomic, readwrite) double weight;

@property(nonatomic, readwrite) BOOL hasWeight;
/** 服务类型 */
@property(nonatomic, readwrite) ServerType type;

@property(nonatomic, readwrite) BOOL hasType;
/** websocket服务 */
@property(nonatomic, readwrite) int32_t wsPort;

@property(nonatomic, readwrite) BOOL hasWsPort;
/** websocket服务 */
@property(nonatomic, readwrite) int32_t wssPort;

@property(nonatomic, readwrite) BOOL hasWssPort;
@end

#pragma mark - AccountBase

typedef GPB_ENUM(AccountBase_FieldNumber) {
  AccountBase_FieldNumber_Id_p = 1,
  AccountBase_FieldNumber_Name = 2,
  AccountBase_FieldNumber_Nickname = 3,
  AccountBase_FieldNumber_Type = 4,
  AccountBase_FieldNumber_Portrait = 5,
  AccountBase_FieldNumber_Mobile = 6,
  AccountBase_FieldNumber_SerialNo = 7,
  AccountBase_FieldNumber_RoomId = 8,
  AccountBase_FieldNumber_RelativePortrait = 9,
  AccountBase_FieldNumber_Tag = 10,
};

/**
 * 帐号基础信息
 **/
GPB_FINAL @interface AccountBase : GPBMessage

/** 帐号ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

/** 用户名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** 昵称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nickname;
/** Test to see if @c nickname has been set. */
@property(nonatomic, readwrite) BOOL hasNickname;

/** 帐号类型 */
@property(nonatomic, readwrite) AccountType type;

@property(nonatomic, readwrite) BOOL hasType;
/** 头像地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *portrait;
/** Test to see if @c portrait has been set. */
@property(nonatomic, readwrite) BOOL hasPortrait;

/** 手机 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mobile;
/** Test to see if @c mobile has been set. */
@property(nonatomic, readwrite) BOOL hasMobile;

/** 序列号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *serialNo;
/** Test to see if @c serialNo has been set. */
@property(nonatomic, readwrite) BOOL hasSerialNo;

/** 房间ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *roomId;
/** Test to see if @c roomId has been set. */
@property(nonatomic, readwrite) BOOL hasRoomId;

/** 头像相对地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *relativePortrait;
/** Test to see if @c relativePortrait has been set. */
@property(nonatomic, readwrite) BOOL hasRelativePortrait;

/** 附加标签 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tag;
/** Test to see if @c tag has been set. */
@property(nonatomic, readwrite) BOOL hasTag;

@end

#pragma mark - RoomBase

typedef GPB_ENUM(RoomBase_FieldNumber) {
  RoomBase_FieldNumber_Id_p = 1,
  RoomBase_FieldNumber_No = 2,
  RoomBase_FieldNumber_SdkNo = 3,
  RoomBase_FieldNumber_Token = 4,
  RoomBase_FieldNumber_OwnerType = 5,
  RoomBase_FieldNumber_OwnerId = 6,
  RoomBase_FieldNumber_AccessPwd = 7,
  RoomBase_FieldNumber_AccessWhitelist = 8,
  RoomBase_FieldNumber_Password = 9,
  RoomBase_FieldNumber_Limited = 10,
  RoomBase_FieldNumber_State = 11,
  RoomBase_FieldNumber_Locked = 12,
  RoomBase_FieldNumber_Watermark = 13,
  RoomBase_FieldNumber_Vstate = 14,
  RoomBase_FieldNumber_Astate = 15,
  RoomBase_FieldNumber_MovehostState = 16,
  RoomBase_FieldNumber_AppId = 17,
  RoomBase_FieldNumber_Mute = 18,
  RoomBase_FieldNumber_Mode = 19,
  RoomBase_FieldNumber_McuMode = 20,
  RoomBase_FieldNumber_MaxAudio = 21,
  RoomBase_FieldNumber_MaxVideo = 22,
};

/**
 * 房间基础信息
 **/
GPB_FINAL @interface RoomBase : GPBMessage

/** 房间ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

/** 房间No */
@property(nonatomic, readwrite, copy, null_resettable) NSString *no;
/** Test to see if @c no has been set. */
@property(nonatomic, readwrite) BOOL hasNo;

/** SDK NO */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sdkNo;
/** Test to see if @c sdkNo has been set. */
@property(nonatomic, readwrite) BOOL hasSdkNo;

/** token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

/** 所有者类型 */
@property(nonatomic, readwrite) OwnerType ownerType;

@property(nonatomic, readwrite) BOOL hasOwnerType;
/** 房间所有者ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *ownerId;
/** Test to see if @c ownerId has been set. */
@property(nonatomic, readwrite) BOOL hasOwnerId;

/** 是否需要密码进入 */
@property(nonatomic, readwrite) BOOL accessPwd;

@property(nonatomic, readwrite) BOOL hasAccessPwd;
/** 是否验证白名单 */
@property(nonatomic, readwrite) BOOL accessWhitelist;

@property(nonatomic, readwrite) BOOL hasAccessWhitelist;
/** 进入密码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *password;
/** Test to see if @c password has been set. */
@property(nonatomic, readwrite) BOOL hasPassword;

/** 方数限制 */
@property(nonatomic, readwrite) int32_t limited;

@property(nonatomic, readwrite) BOOL hasLimited;
@property(nonatomic, readwrite) int32_t state;

@property(nonatomic, readwrite) BOOL hasState;
/** 锁定房间 */
@property(nonatomic, readwrite) BOOL locked;

@property(nonatomic, readwrite) BOOL hasLocked;
/** 是否开启水印 */
@property(nonatomic, readwrite) BOOL watermark;

@property(nonatomic, readwrite) BOOL hasWatermark;
/** 全局视频状态 */
@property(nonatomic, readwrite) DeviceState vstate;

@property(nonatomic, readwrite) BOOL hasVstate;
/** 全局音频状态 */
@property(nonatomic, readwrite) DeviceState astate;

@property(nonatomic, readwrite) BOOL hasAstate;
/** 是否开启流转主持人 */
@property(nonatomic, readwrite) MoveHostState movehostState;

@property(nonatomic, readwrite) BOOL hasMovehostState;
/** app_id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appId;
/** Test to see if @c appId has been set. */
@property(nonatomic, readwrite) BOOL hasAppId;

/** 成员入会时静音 */
@property(nonatomic, readwrite) int32_t mute;

@property(nonatomic, readwrite) BOOL hasMute;
@property(nonatomic, readwrite) RoomMode mode;

@property(nonatomic, readwrite) BOOL hasMode;
@property(nonatomic, readwrite) McuMode mcuMode;

@property(nonatomic, readwrite) BOOL hasMcuMode;
@property(nonatomic, readwrite) int32_t maxAudio;

@property(nonatomic, readwrite) BOOL hasMaxAudio;
@property(nonatomic, readwrite) int32_t maxVideo;

@property(nonatomic, readwrite) BOOL hasMaxVideo;
@end

#pragma mark - ConferenceBase

typedef GPB_ENUM(ConferenceBase_FieldNumber) {
  ConferenceBase_FieldNumber_Id_p = 1,
  ConferenceBase_FieldNumber_Title = 2,
  ConferenceBase_FieldNumber_Content = 3,
  ConferenceBase_FieldNumber_Type = 4,
  ConferenceBase_FieldNumber_BeginTime = 5,
  ConferenceBase_FieldNumber_EndTime = 6,
  ConferenceBase_FieldNumber_Duration = 7,
  ConferenceBase_FieldNumber_State = 8,
  ConferenceBase_FieldNumber_AccountId = 9,
  ConferenceBase_FieldNumber_CorpId = 10,
  ConferenceBase_FieldNumber_LogId = 11,
};

/**
 * 会议基础信息
 **/
GPB_FINAL @interface ConferenceBase : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *title;
/** Test to see if @c title has been set. */
@property(nonatomic, readwrite) BOOL hasTitle;

@property(nonatomic, readwrite, copy, null_resettable) NSString *content;
/** Test to see if @c content has been set. */
@property(nonatomic, readwrite) BOOL hasContent;

/** 会议类型: 1-即时会议; 2-预约会议 */
@property(nonatomic, readwrite) ConferenceType type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite) int64_t beginTime;

@property(nonatomic, readwrite) BOOL hasBeginTime;
@property(nonatomic, readwrite) int64_t endTime;

@property(nonatomic, readwrite) BOOL hasEndTime;
@property(nonatomic, readwrite) int32_t duration;

@property(nonatomic, readwrite) BOOL hasDuration;
@property(nonatomic, readwrite) ConferenceState state;

@property(nonatomic, readwrite) BOOL hasState;
@property(nonatomic, readwrite, copy, null_resettable) NSString *accountId;
/** Test to see if @c accountId has been set. */
@property(nonatomic, readwrite) BOOL hasAccountId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *corpId;
/** Test to see if @c corpId has been set. */
@property(nonatomic, readwrite) BOOL hasCorpId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *logId;
/** Test to see if @c logId has been set. */
@property(nonatomic, readwrite) BOOL hasLogId;

@end

#pragma mark - CorporationBase

typedef GPB_ENUM(CorporationBase_FieldNumber) {
  CorporationBase_FieldNumber_Id_p = 1,
  CorporationBase_FieldNumber_Name = 2,
  CorporationBase_FieldNumber_Logo = 3,
  CorporationBase_FieldNumber_AccountId = 4,
  CorporationBase_FieldNumber_CreatedAt = 5,
  CorporationBase_FieldNumber_VasTime = 6,
  CorporationBase_FieldNumber_VasConc = 7,
  CorporationBase_FieldNumber_LimitCorp = 8,
};

/**
 * 公司基础信息
 **/
GPB_FINAL @interface CorporationBase : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *logo;
/** Test to see if @c logo has been set. */
@property(nonatomic, readwrite) BOOL hasLogo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *accountId;
/** Test to see if @c accountId has been set. */
@property(nonatomic, readwrite) BOOL hasAccountId;

@property(nonatomic, readwrite) int64_t createdAt;

@property(nonatomic, readwrite) BOOL hasCreatedAt;
@property(nonatomic, readwrite) BOOL vasTime;

@property(nonatomic, readwrite) BOOL hasVasTime;
@property(nonatomic, readwrite) BOOL vasConc;

@property(nonatomic, readwrite) BOOL hasVasConc;
@property(nonatomic, readwrite) BOOL limitCorp;

@property(nonatomic, readwrite) BOOL hasLimitCorp;
@end

#pragma mark - CorporationOrgBase

typedef GPB_ENUM(CorporationOrgBase_FieldNumber) {
  CorporationOrgBase_FieldNumber_Id_p = 1,
  CorporationOrgBase_FieldNumber_Name = 2,
  CorporationOrgBase_FieldNumber_Pid = 3,
  CorporationOrgBase_FieldNumber_CorpId = 4,
};

/**
 * 组织基础信息
 **/
GPB_FINAL @interface CorporationOrgBase : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *pid;
/** Test to see if @c pid has been set. */
@property(nonatomic, readwrite) BOOL hasPid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *corpId;
/** Test to see if @c corpId has been set. */
@property(nonatomic, readwrite) BOOL hasCorpId;

@end

#pragma mark - Room

typedef GPB_ENUM(Room_FieldNumber) {
  Room_FieldNumber_Id_p = 1,
  Room_FieldNumber_No = 2,
  Room_FieldNumber_SdkNo = 3,
  Room_FieldNumber_WhiteBoard = 4,
  Room_FieldNumber_State = 5,
  Room_FieldNumber_Type = 6,
  Room_FieldNumber_SharingAccId = 7,
  Room_FieldNumber_SharingType = 8,
  Room_FieldNumber_SharingPicURL = 9,
  Room_FieldNumber_Vstate = 10,
  Room_FieldNumber_Astate = 11,
  Room_FieldNumber_SharingStreamId = 12,
  Room_FieldNumber_SharingSdkno = 13,
  Room_FieldNumber_SharingWbRatio = 14,
  Room_FieldNumber_Watermark = 15,
  Room_FieldNumber_Locked = 16,
  Room_FieldNumber_MovehostState = 17,
  Room_FieldNumber_AppId = 18,
  Room_FieldNumber_Mute = 19,
  Room_FieldNumber_Mode = 20,
  Room_FieldNumber_McuMode = 21,
  Room_FieldNumber_RelieveAstate = 22,
  Room_FieldNumber_SharingRelativePicURL = 23,
  Room_FieldNumber_ExternalMemberLimit = 24,
  Room_FieldNumber_InsideWaitingRoomState = 25,
  Room_FieldNumber_ExternalWaitingRoomState = 26,
  Room_FieldNumber_InsideScreenShot = 27,
  Room_FieldNumber_InsideWaterMark = 28,
  Room_FieldNumber_ExternalScreenShot = 29,
  Room_FieldNumber_ExternalWaterMark = 30,
  Room_FieldNumber_ExternalShareScreen = 31,
  Room_FieldNumber_CorpExternalMemberLimit = 32,
  Room_FieldNumber_AccessWhitelist = 33,
  Room_FieldNumber_MemberSensitiveState = 34,
  Room_FieldNumber_MsgId = 35,
  Room_FieldNumber_LayoutType = 36,
  Room_FieldNumber_McuStartAccId = 37,
  Room_FieldNumber_Res = 38,
  Room_FieldNumber_McuAccNum = 39,
  Room_FieldNumber_WebinarChat = 40,
  Room_FieldNumber_WebinarScreenShot = 41,
  Room_FieldNumber_PicMode = 42,
};

/**
 * 会议室实时信息
 **/
GPB_FINAL @interface Room : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *no;
/** Test to see if @c no has been set. */
@property(nonatomic, readwrite) BOOL hasNo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *sdkNo;
/** Test to see if @c sdkNo has been set. */
@property(nonatomic, readwrite) BOOL hasSdkNo;

/** [已废弃] */
@property(nonatomic, readwrite) BOOL whiteBoard;

@property(nonatomic, readwrite) BOOL hasWhiteBoard;
/** 房间状态 */
@property(nonatomic, readwrite) int32_t state;

@property(nonatomic, readwrite) BOOL hasState;
/** 连线模式 */
@property(nonatomic, readwrite) LinkType type;

@property(nonatomic, readwrite) BOOL hasType;
/** 当前分享者帐号ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sharingAccId;
/** Test to see if @c sharingAccId has been set. */
@property(nonatomic, readwrite) BOOL hasSharingAccId;

/** 1-电子白板;2-图片;3-桌面 */
@property(nonatomic, readwrite) SharingType sharingType;

@property(nonatomic, readwrite) BOOL hasSharingType;
/** 分享图片时的图片地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sharingPicURL;
/** Test to see if @c sharingPicURL has been set. */
@property(nonatomic, readwrite) BOOL hasSharingPicURL;

/** 全局视频状态 */
@property(nonatomic, readwrite) DeviceState vstate;

@property(nonatomic, readwrite) BOOL hasVstate;
/** 全局音频状态 */
@property(nonatomic, readwrite) DeviceState astate;

@property(nonatomic, readwrite) BOOL hasAstate;
/** 屏幕共享时的流ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sharingStreamId;
/** Test to see if @c sharingStreamId has been set. */
@property(nonatomic, readwrite) BOOL hasSharingStreamId;

/** 当前分享者帐号 SDKNO */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sharingSdkno;
/** Test to see if @c sharingSdkno has been set. */
@property(nonatomic, readwrite) BOOL hasSharingSdkno;

/** 分享中白板的宽高比 */
@property(nonatomic, readwrite) float sharingWbRatio;

@property(nonatomic, readwrite) BOOL hasSharingWbRatio;
/** 是否开启水印 */
@property(nonatomic, readwrite) BOOL watermark;

@property(nonatomic, readwrite) BOOL hasWatermark;
/** 是否锁定 */
@property(nonatomic, readwrite) BOOL locked;

@property(nonatomic, readwrite) BOOL hasLocked;
/** 是否开启流转主持人 */
@property(nonatomic, readwrite) MoveHostState movehostState;

@property(nonatomic, readwrite) BOOL hasMovehostState;
/** app_id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appId;
/** Test to see if @c appId has been set. */
@property(nonatomic, readwrite) BOOL hasAppId;

/** 成员入会时静音 */
@property(nonatomic, readwrite) MuteState mute;

@property(nonatomic, readwrite) BOOL hasMute;
@property(nonatomic, readwrite) RoomMode mode;

@property(nonatomic, readwrite) BOOL hasMode;
@property(nonatomic, readwrite) McuMode mcuMode;

@property(nonatomic, readwrite) BOOL hasMcuMode;
/** 允许成员自行解除禁音 0:允许解除禁音 1:不允许解除禁音 */
@property(nonatomic, readwrite) RelieveAstate relieveAstate;

@property(nonatomic, readwrite) BOOL hasRelieveAstate;
/** 分享图片时的相对图片地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sharingRelativePicURL;
/** Test to see if @c sharingRelativePicURL has been set. */
@property(nonatomic, readwrite) BOOL hasSharingRelativePicURL;

/** 企业外外部联系人入会类型限制(0：不允许外部联系人入会;1:允许外部联系人入会；2：仅受邀外部联系人入会) */
@property(nonatomic, readwrite) ExternalMemberLimit externalMemberLimit;

@property(nonatomic, readwrite) BOOL hasExternalMemberLimit;
/** 内部成员是否开启等候室(0：关闭;1:开启;) */
@property(nonatomic, readwrite) InsideWaitingRoomState insideWaitingRoomState;

@property(nonatomic, readwrite) BOOL hasInsideWaitingRoomState;
/** 外部联系人是否开启等候室(0：关闭;1:开启;) */
@property(nonatomic, readwrite) ExternalWaitingRoomState externalWaitingRoomState;

@property(nonatomic, readwrite) BOOL hasExternalWaitingRoomState;
/** 内部成员权限-截图与录屏 */
@property(nonatomic, readwrite) BOOL insideScreenShot;

@property(nonatomic, readwrite) BOOL hasInsideScreenShot;
/** 内部成员权限-会议水印 */
@property(nonatomic, readwrite) BOOL insideWaterMark;

@property(nonatomic, readwrite) BOOL hasInsideWaterMark;
/** 外部成员权限-截图与录屏 */
@property(nonatomic, readwrite) BOOL externalScreenShot;

@property(nonatomic, readwrite) BOOL hasExternalScreenShot;
/** 外部成员权限-会议水印 */
@property(nonatomic, readwrite) BOOL externalWaterMark;

@property(nonatomic, readwrite) BOOL hasExternalWaterMark;
/** 外部成员权限-共享屏幕 */
@property(nonatomic, readwrite) BOOL externalShareScreen;

@property(nonatomic, readwrite) BOOL hasExternalShareScreen;
/** 企业内外部联系人入会类型限制(0：不允许外部联系人入会;1:允许外部联系人入会；2：仅受邀外部联系人入会) */
@property(nonatomic, readwrite) ExternalMemberLimit corpExternalMemberLimit;

@property(nonatomic, readwrite) BOOL hasCorpExternalMemberLimit;
/** 企业内部成员开启白名单限制(false:不开启;true：开启) */
@property(nonatomic, readwrite) BOOL accessWhitelist;

@property(nonatomic, readwrite) BOOL hasAccessWhitelist;
/** 会中成员姓名脱敏(false：不脱敏;true:脱敏) */
@property(nonatomic, readwrite) BOOL memberSensitiveState;

@property(nonatomic, readwrite) BOOL hasMemberSensitiveState;
/** 消息ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *msgId;
/** Test to see if @c msgId has been set. */
@property(nonatomic, readwrite) BOOL hasMsgId;

/** MCU录制布局(0:自动布局;1:自定义布局(均分布局); */
@property(nonatomic, readwrite) int32_t layoutType;

@property(nonatomic, readwrite) BOOL hasLayoutType;
/** 当前开启MCU帐号ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mcuStartAccId;
/** Test to see if @c mcuStartAccId has been set. */
@property(nonatomic, readwrite) BOOL hasMcuStartAccId;

/** 视频分辨 */
@property(nonatomic, readwrite) int32_t res;

@property(nonatomic, readwrite) BOOL hasRes;
/** 当前mcu自定义布局方数 */
@property(nonatomic, readwrite) int32_t mcuAccNum;

@property(nonatomic, readwrite) BOOL hasMcuAccNum;
/** 全局聊天状态 */
@property(nonatomic, readwrite) WebinarState webinarChat;

@property(nonatomic, readwrite) BOOL hasWebinarChat;
/** 全局截屏状态 */
@property(nonatomic, readwrite) WebinarState webinarScreenShot;

@property(nonatomic, readwrite) BOOL hasWebinarScreenShot;
/** 是否开启0帧模式(false:不开启;true:开启;) */
@property(nonatomic, readwrite) BOOL picMode;

@property(nonatomic, readwrite) BOOL hasPicMode;
@end

#pragma mark - Account

typedef GPB_ENUM(Account_FieldNumber) {
  Account_FieldNumber_Id_p = 1,
  Account_FieldNumber_StreamId = 2,
  Account_FieldNumber_Name = 3,
  Account_FieldNumber_Nickname = 4,
  Account_FieldNumber_Portrait = 5,
  Account_FieldNumber_Role = 6,
  Account_FieldNumber_VideoState = 7,
  Account_FieldNumber_AudioState = 8,
  Account_FieldNumber_Delay = 9,
  Account_FieldNumber_UpRate = 10,
  Account_FieldNumber_DownRate = 11,
  Account_FieldNumber_Address = 12,
  Account_FieldNumber_Port = 13,
  Account_FieldNumber_SharedPicture = 14,
  Account_FieldNumber_TerminalType = 15,
  Account_FieldNumber_StreamsArray = 16,
  Account_FieldNumber_NetLevel = 17,
  Account_FieldNumber_UpLost = 18,
  Account_FieldNumber_DownLost = 19,
  Account_FieldNumber_Tag = 20,
  Account_FieldNumber_Mode = 21,
  Account_FieldNumber_Hus = 22,
  Account_FieldNumber_DeviceAddress = 23,
  Account_FieldNumber_UpLevel = 24,
  Account_FieldNumber_RelativePortrait = 25,
  Account_FieldNumber_Version = 26,
  Account_FieldNumber_ErrMsg = 27,
  Account_FieldNumber_ExtendInfo = 28,
  Account_FieldNumber_Mobile = 29,
  Account_FieldNumber_Token = 30,
  Account_FieldNumber_ChatState = 31,
};

/**
 * 参会人
 **/
GPB_FINAL @interface Account : GPBMessage

/** ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

/** 流媒体连接标识 */
@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;
/** 用户名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** 昵称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nickname;
/** Test to see if @c nickname has been set. */
@property(nonatomic, readwrite) BOOL hasNickname;

/** 头像 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *portrait;
/** Test to see if @c portrait has been set. */
@property(nonatomic, readwrite) BOOL hasPortrait;

/** 参会角色 */
@property(nonatomic, readwrite) ConferenceRole role;

@property(nonatomic, readwrite) BOOL hasRole;
/** 视频状态 */
@property(nonatomic, readwrite) DeviceState videoState;

@property(nonatomic, readwrite) BOOL hasVideoState;
/** 音频状态 */
@property(nonatomic, readwrite) DeviceState audioState;

@property(nonatomic, readwrite) BOOL hasAudioState;
/** 网络延迟 */
@property(nonatomic, readwrite) int32_t delay;

@property(nonatomic, readwrite) BOOL hasDelay;
/** 上行速率 B/S */
@property(nonatomic, readwrite) int32_t upRate;

@property(nonatomic, readwrite) BOOL hasUpRate;
/** 下行速率 B/S */
@property(nonatomic, readwrite) int32_t downRate;

@property(nonatomic, readwrite) BOOL hasDownRate;
/** 远程地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;
/** Test to see if @c address has been set. */
@property(nonatomic, readwrite) BOOL hasAddress;

/** 远程端口 */
@property(nonatomic, readwrite) int32_t port;

@property(nonatomic, readwrite) BOOL hasPort;
/** 当前分享的图片地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sharedPicture;
/** Test to see if @c sharedPicture has been set. */
@property(nonatomic, readwrite) BOOL hasSharedPicture;

/** 登录终端类型 */
@property(nonatomic, readwrite) TerminalType terminalType;

@property(nonatomic, readwrite) BOOL hasTerminalType;
/** 码流信息 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Stream*> *streamsArray;
/** The number of items in @c streamsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger streamsArray_Count;

/** 网络等级 */
@property(nonatomic, readwrite) int32_t netLevel;

@property(nonatomic, readwrite) BOOL hasNetLevel;
/** 上行丢包 */
@property(nonatomic, readwrite) int32_t upLost;

@property(nonatomic, readwrite) BOOL hasUpLost;
/** 下行丢包 */
@property(nonatomic, readwrite) int32_t downLost;

@property(nonatomic, readwrite) BOOL hasDownLost;
/** 绑定数据 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tag;
/** Test to see if @c tag has been set. */
@property(nonatomic, readwrite) BOOL hasTag;

/** 入会模式 */
@property(nonatomic, readwrite) AccountMode mode;

@property(nonatomic, readwrite) BOOL hasMode;
/** 举手状态 */
@property(nonatomic, readwrite) HandUpStatus hus;

@property(nonatomic, readwrite) BOOL hasHus;
/** 设备地址和密码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceAddress;
/** Test to see if @c deviceAddress has been set. */
@property(nonatomic, readwrite) BOOL hasDeviceAddress;

/** 上行挡位 */
@property(nonatomic, readwrite) int32_t upLevel;

@property(nonatomic, readwrite) BOOL hasUpLevel;
/** 头像相对路径 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *relativePortrait;
/** Test to see if @c relativePortrait has been set. */
@property(nonatomic, readwrite) BOOL hasRelativePortrait;

/** 版本号 */
@property(nonatomic, readwrite) int32_t version;

@property(nonatomic, readwrite) BOOL hasVersion;
@property(nonatomic, readwrite, copy, null_resettable) NSString *errMsg;
/** Test to see if @c errMsg has been set. */
@property(nonatomic, readwrite) BOOL hasErrMsg;

/** 自定扩展信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *extendInfo;
/** Test to see if @c extendInfo has been set. */
@property(nonatomic, readwrite) BOOL hasExtendInfo;

/** 手机号码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mobile;
/** Test to see if @c mobile has been set. */
@property(nonatomic, readwrite) BOOL hasMobile;

/** 账号登录token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

/** 聊天状态 */
@property(nonatomic, readwrite) DeviceState chatState;

@property(nonatomic, readwrite) BOOL hasChatState;
@end

#pragma mark - Stream

typedef GPB_ENUM(Stream_FieldNumber) {
  Stream_FieldNumber_Id_p = 1,
  Stream_FieldNumber_Width = 2,
  Stream_FieldNumber_Height = 3,
  Stream_FieldNumber_Bitrate = 4,
  Stream_FieldNumber_Fps = 5,
  Stream_FieldNumber_Type = 6,
  Stream_FieldNumber_State = 7,
  Stream_FieldNumber_Name = 8,
  Stream_FieldNumber_Codec = 9,
  Stream_FieldNumber_Channel = 10,
  Stream_FieldNumber_ChannelType = 11,
  Stream_FieldNumber_Angle = 12,
};

/**
 * 码率信息
 **/
GPB_FINAL @interface Stream : GPBMessage

/** 码流ID，1，2，4 */
@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
/** 画面宽 */
@property(nonatomic, readwrite) int32_t width;

@property(nonatomic, readwrite) BOOL hasWidth;
/** 画面高 */
@property(nonatomic, readwrite) int32_t height;

@property(nonatomic, readwrite) BOOL hasHeight;
/** 码率Kbps */
@property(nonatomic, readwrite) int32_t bitrate;

@property(nonatomic, readwrite) BOOL hasBitrate;
/** 帧率 */
@property(nonatomic, readwrite) int32_t fps;

@property(nonatomic, readwrite) BOOL hasFps;
/** 0-主流；1-辅流 */
@property(nonatomic, readwrite) StreamType type;

@property(nonatomic, readwrite) BOOL hasType;
/** 状态，预留字段 */
@property(nonatomic, readwrite) int32_t state;

@property(nonatomic, readwrite) BOOL hasState;
/** 名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** 编码类型 */
@property(nonatomic, readwrite) Codec codec;

@property(nonatomic, readwrite) BOOL hasCodec;
/** 设备通道号 */
@property(nonatomic, readwrite) int32_t channel;

@property(nonatomic, readwrite) BOOL hasChannel;
/** 通道类型 */
@property(nonatomic, readwrite) ChannelType channelType;

@property(nonatomic, readwrite) BOOL hasChannelType;
/** 视频流角度 */
@property(nonatomic, readwrite) int32_t angle;

@property(nonatomic, readwrite) BOOL hasAngle;
@end

#pragma mark - Wnd

typedef GPB_ENUM(Wnd_FieldNumber) {
  Wnd_FieldNumber_No = 1,
  Wnd_FieldNumber_AccountId = 2,
};

/**
 * 窗口信息
 **/
GPB_FINAL @interface Wnd : GPBMessage

/** 窗口编号 */
@property(nonatomic, readwrite) int32_t no;

@property(nonatomic, readwrite) BOOL hasNo;
/** 帐号ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *accountId;
/** Test to see if @c accountId has been set. */
@property(nonatomic, readwrite) BOOL hasAccountId;

@end

#pragma mark - WndLayout

typedef GPB_ENUM(WndLayout_FieldNumber) {
  WndLayout_FieldNumber_Mode = 1,
  WndLayout_FieldNumber_RoomId = 2,
  WndLayout_FieldNumber_Enabled = 3,
  WndLayout_FieldNumber_WndsArray = 4,
};

/**
 * 多画面布局
 **/
GPB_FINAL @interface WndLayout : GPBMessage

/** 布局模式：1+4/auto */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mode;
/** Test to see if @c mode has been set. */
@property(nonatomic, readwrite) BOOL hasMode;

/** 房间ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *roomId;
/** Test to see if @c roomId has been set. */
@property(nonatomic, readwrite) BOOL hasRoomId;

/** 开启/关闭 */
@property(nonatomic, readwrite) BOOL enabled;

@property(nonatomic, readwrite) BOOL hasEnabled;
/** 窗口列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Wnd*> *wndsArray;
/** The number of items in @c wndsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger wndsArray_Count;

@end

#pragma mark - RealAccount

typedef GPB_ENUM(RealAccount_FieldNumber) {
  RealAccount_FieldNumber_Id_p = 1,
  RealAccount_FieldNumber_Name = 2,
  RealAccount_FieldNumber_Nickname = 3,
  RealAccount_FieldNumber_Portrait = 4,
  RealAccount_FieldNumber_SdkNo = 5,
  RealAccount_FieldNumber_Role = 6,
  RealAccount_FieldNumber_RoomId = 7,
  RealAccount_FieldNumber_RoomNo = 8,
  RealAccount_FieldNumber_RoomSdkno = 9,
  RealAccount_FieldNumber_OwnerId = 10,
  RealAccount_FieldNumber_OwnerType = 11,
  RealAccount_FieldNumber_RoomServerId = 12,
  RealAccount_FieldNumber_VtduServerId = 13,
  RealAccount_FieldNumber_SessionId = 14,
  RealAccount_FieldNumber_ClientId = 15,
  RealAccount_FieldNumber_UpdatedAt = 16,
  RealAccount_FieldNumber_VideoState = 17,
  RealAccount_FieldNumber_AudioState = 18,
  RealAccount_FieldNumber_Delay = 19,
  RealAccount_FieldNumber_UpRate = 20,
  RealAccount_FieldNumber_DownRate = 21,
  RealAccount_FieldNumber_Address = 22,
  RealAccount_FieldNumber_Port = 23,
  RealAccount_FieldNumber_TerminalType = 24,
  RealAccount_FieldNumber_UpLost = 25,
  RealAccount_FieldNumber_Tag = 27,
  RealAccount_FieldNumber_Mode = 28,
  RealAccount_FieldNumber_StreamsArray = 29,
  RealAccount_FieldNumber_NetLevel = 30,
  RealAccount_FieldNumber_AccountType = 31,
  RealAccount_FieldNumber_AppId = 32,
  RealAccount_FieldNumber_DeviceId = 33,
  RealAccount_FieldNumber_CorpId = 34,
  RealAccount_FieldNumber_UpLevel = 35,
  RealAccount_FieldNumber_AccountRelativePortrait = 36,
  RealAccount_FieldNumber_Version = 37,
  RealAccount_FieldNumber_ErrMsg = 38,
  RealAccount_FieldNumber_ExtendInfo = 39,
  RealAccount_FieldNumber_McuLable = 40,
};

/**
 * 帐号状态信息
 **/
GPB_FINAL @interface RealAccount : GPBMessage

/** 帐号ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

/** 用户名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** 昵称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nickname;
/** Test to see if @c nickname has been set. */
@property(nonatomic, readwrite) BOOL hasNickname;

/** 头像地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *portrait;
/** Test to see if @c portrait has been set. */
@property(nonatomic, readwrite) BOOL hasPortrait;

/** SDK NO */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sdkNo;
/** Test to see if @c sdkNo has been set. */
@property(nonatomic, readwrite) BOOL hasSdkNo;

/** 角色 */
@property(nonatomic, readwrite) ConferenceRole role;

@property(nonatomic, readwrite) BOOL hasRole;
/** 目标房间ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *roomId;
/** Test to see if @c roomId has been set. */
@property(nonatomic, readwrite) BOOL hasRoomId;

/** 目标房间ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *roomNo;
/** Test to see if @c roomNo has been set. */
@property(nonatomic, readwrite) BOOL hasRoomNo;

/** 目标房间SDK No */
@property(nonatomic, readwrite, copy, null_resettable) NSString *roomSdkno;
/** Test to see if @c roomSdkno has been set. */
@property(nonatomic, readwrite) BOOL hasRoomSdkno;

@property(nonatomic, readwrite, copy, null_resettable) NSString *ownerId;
/** Test to see if @c ownerId has been set. */
@property(nonatomic, readwrite) BOOL hasOwnerId;

@property(nonatomic, readwrite) OwnerType ownerType;

@property(nonatomic, readwrite) BOOL hasOwnerType;
/** 服务ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *roomServerId;
/** Test to see if @c roomServerId has been set. */
@property(nonatomic, readwrite) BOOL hasRoomServerId;

/** 服务ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *vtduServerId;
/** Test to see if @c vtduServerId has been set. */
@property(nonatomic, readwrite) BOOL hasVtduServerId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

@property(nonatomic, readwrite) int32_t clientId;

@property(nonatomic, readwrite) BOOL hasClientId;
@property(nonatomic, readwrite) int64_t updatedAt;

@property(nonatomic, readwrite) BOOL hasUpdatedAt;
/** 视频状态 */
@property(nonatomic, readwrite) DeviceState videoState;

@property(nonatomic, readwrite) BOOL hasVideoState;
/** 音频状态 */
@property(nonatomic, readwrite) DeviceState audioState;

@property(nonatomic, readwrite) BOOL hasAudioState;
/** 网络延迟 ms */
@property(nonatomic, readwrite) int32_t delay;

@property(nonatomic, readwrite) BOOL hasDelay;
/** 上行速率 Kbps; */
@property(nonatomic, readwrite) int32_t upRate;

@property(nonatomic, readwrite) BOOL hasUpRate;
/** 下行速率 Kbps; */
@property(nonatomic, readwrite) int32_t downRate;

@property(nonatomic, readwrite) BOOL hasDownRate;
/** 地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;
/** Test to see if @c address has been set. */
@property(nonatomic, readwrite) BOOL hasAddress;

/** 端口 */
@property(nonatomic, readwrite) int32_t port;

@property(nonatomic, readwrite) BOOL hasPort;
/** 终端类型 */
@property(nonatomic, readwrite) TerminalType terminalType;

@property(nonatomic, readwrite) BOOL hasTerminalType;
/** 上行丢包率; */
@property(nonatomic, readwrite) int32_t upLost;

@property(nonatomic, readwrite) BOOL hasUpLost;
@property(nonatomic, readwrite, copy, null_resettable) NSString *tag;
/** Test to see if @c tag has been set. */
@property(nonatomic, readwrite) BOOL hasTag;

/** 0-普通；1-隐藏 */
@property(nonatomic, readwrite) AccountMode mode;

@property(nonatomic, readwrite) BOOL hasMode;
/** 码流信息 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Stream*> *streamsArray;
/** The number of items in @c streamsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger streamsArray_Count;

/** 网络信号 */
@property(nonatomic, readwrite) int32_t netLevel;

@property(nonatomic, readwrite) BOOL hasNetLevel;
@property(nonatomic, readwrite) AccountType accountType;

@property(nonatomic, readwrite) BOOL hasAccountType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *appId;
/** Test to see if @c appId has been set. */
@property(nonatomic, readwrite) BOOL hasAppId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;
/** Test to see if @c deviceId has been set. */
@property(nonatomic, readwrite) BOOL hasDeviceId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *corpId;
/** Test to see if @c corpId has been set. */
@property(nonatomic, readwrite) BOOL hasCorpId;

@property(nonatomic, readwrite) int32_t upLevel;

@property(nonatomic, readwrite) BOOL hasUpLevel;
/** 头像相对路径 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *accountRelativePortrait;
/** Test to see if @c accountRelativePortrait has been set. */
@property(nonatomic, readwrite) BOOL hasAccountRelativePortrait;

@property(nonatomic, readwrite) int32_t version;

@property(nonatomic, readwrite) BOOL hasVersion;
@property(nonatomic, readwrite, copy, null_resettable) NSString *errMsg;
/** Test to see if @c errMsg has been set. */
@property(nonatomic, readwrite) BOOL hasErrMsg;

/** 自定义扩展信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *extendInfo;
/** Test to see if @c extendInfo has been set. */
@property(nonatomic, readwrite) BOOL hasExtendInfo;

/** MCU标签信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mcuLable;
/** Test to see if @c mcuLable has been set. */
@property(nonatomic, readwrite) BOOL hasMcuLable;

@end

#pragma mark - SystemOption

typedef GPB_ENUM(SystemOption_FieldNumber) {
  SystemOption_FieldNumber_Name = 1,
  SystemOption_FieldNumber_Value = 2,
};

/**
 * 系统参数
 **/
GPB_FINAL @interface SystemOption : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *value;
/** Test to see if @c value has been set. */
@property(nonatomic, readwrite) BOOL hasValue;

@end

#pragma mark - MsgQueueWrap

typedef GPB_ENUM(MsgQueueWrap_FieldNumber) {
  MsgQueueWrap_FieldNumber_Data_p = 1,
  MsgQueueWrap_FieldNumber_TargetId = 2,
  MsgQueueWrap_FieldNumber_Command = 3,
  MsgQueueWrap_FieldNumber_TokenId = 4,
};

GPB_FINAL @interface MsgQueueWrap : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *targetId;
/** Test to see if @c targetId has been set. */
@property(nonatomic, readwrite) BOOL hasTargetId;

@property(nonatomic, readwrite) Command command;

@property(nonatomic, readwrite) BOOL hasCommand;
@property(nonatomic, readwrite, copy, null_resettable) NSString *tokenId;
/** Test to see if @c tokenId has been set. */
@property(nonatomic, readwrite) BOOL hasTokenId;

@end

#pragma mark - TransparentWrap

typedef GPB_ENUM(TransparentWrap_FieldNumber) {
  TransparentWrap_FieldNumber_Id_p = 1,
  TransparentWrap_FieldNumber_Command = 2,
  TransparentWrap_FieldNumber_Payload = 3,
  TransparentWrap_FieldNumber_Type = 4,
};

GPB_FINAL @interface TransparentWrap : GPBMessage

/** reg上是tokenId,room上是accId */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite) Command command;

@property(nonatomic, readwrite) BOOL hasCommand;
@property(nonatomic, readwrite, copy, null_resettable) NSData *payload;
/** Test to see if @c payload has been set. */
@property(nonatomic, readwrite) BOOL hasPayload;

@property(nonatomic, readwrite) PacketType type;

@property(nonatomic, readwrite) BOOL hasType;
@end

#pragma mark - DeviceOnline

typedef GPB_ENUM(DeviceOnline_FieldNumber) {
  DeviceOnline_FieldNumber_Id_p = 1,
  DeviceOnline_FieldNumber_Name = 2,
  DeviceOnline_FieldNumber_Address = 3,
  DeviceOnline_FieldNumber_Port = 4,
  DeviceOnline_FieldNumber_UpdatedAt = 5,
  DeviceOnline_FieldNumber_ServerId = 6,
  DeviceOnline_FieldNumber_Tgt = 7,
  DeviceOnline_FieldNumber_Token = 8,
  DeviceOnline_FieldNumber_Dot = 9,
};

GPB_FINAL @interface DeviceOnline : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;
/** Test to see if @c address has been set. */
@property(nonatomic, readwrite) BOOL hasAddress;

@property(nonatomic, readwrite) int32_t port;

@property(nonatomic, readwrite) BOOL hasPort;
@property(nonatomic, readwrite) int64_t updatedAt;

@property(nonatomic, readwrite) BOOL hasUpdatedAt;
@property(nonatomic, readwrite, copy, null_resettable) NSString *serverId;
/** Test to see if @c serverId has been set. */
@property(nonatomic, readwrite) BOOL hasServerId;

@property(nonatomic, readwrite) TerminalGroupType tgt;

@property(nonatomic, readwrite) BOOL hasTgt;
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

@property(nonatomic, readwrite) SdkNetType dot;

@property(nonatomic, readwrite) BOOL hasDot;
@end

#pragma mark - RoomInServer

typedef GPB_ENUM(RoomInServer_FieldNumber) {
  RoomInServer_FieldNumber_RoomId = 1,
  RoomInServer_FieldNumber_ServerId = 2,
  RoomInServer_FieldNumber_ServerType = 3,
  RoomInServer_FieldNumber_UpdatedAt = 4,
  RoomInServer_FieldNumber_Loading = 5,
};

GPB_FINAL @interface RoomInServer : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *roomId;
/** Test to see if @c roomId has been set. */
@property(nonatomic, readwrite) BOOL hasRoomId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *serverId;
/** Test to see if @c serverId has been set. */
@property(nonatomic, readwrite) BOOL hasServerId;

@property(nonatomic, readwrite) ServerType serverType;

@property(nonatomic, readwrite) BOOL hasServerType;
@property(nonatomic, readwrite) int64_t updatedAt;

@property(nonatomic, readwrite) BOOL hasUpdatedAt;
@property(nonatomic, readwrite) int64_t loading;

@property(nonatomic, readwrite) BOOL hasLoading;
@end

#pragma mark - ImBody

typedef GPB_ENUM(ImBody_FieldNumber) {
  ImBody_FieldNumber_Id_p = 1,
  ImBody_FieldNumber_SrcId = 2,
  ImBody_FieldNumber_SrcName = 3,
  ImBody_FieldNumber_SrcNickname = 4,
  ImBody_FieldNumber_SrcPortrait = 5,
  ImBody_FieldNumber_DstId = 6,
  ImBody_FieldNumber_DstType = 7,
  ImBody_FieldNumber_Type = 8,
  ImBody_FieldNumber_Message = 9,
  ImBody_FieldNumber_ImageWidth = 10,
  ImBody_FieldNumber_ImageHeight = 11,
  ImBody_FieldNumber_AudioDuration = 12,
  ImBody_FieldNumber_CreatedAt = 13,
};

GPB_FINAL @interface ImBody : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *srcName;
/** Test to see if @c srcName has been set. */
@property(nonatomic, readwrite) BOOL hasSrcName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *srcNickname;
/** Test to see if @c srcNickname has been set. */
@property(nonatomic, readwrite) BOOL hasSrcNickname;

@property(nonatomic, readwrite, copy, null_resettable) NSString *srcPortrait;
/** Test to see if @c srcPortrait has been set. */
@property(nonatomic, readwrite) BOOL hasSrcPortrait;

@property(nonatomic, readwrite, copy, null_resettable) NSString *dstId;
/** Test to see if @c dstId has been set. */
@property(nonatomic, readwrite) BOOL hasDstId;

@property(nonatomic, readwrite) ImDstType dstType;

@property(nonatomic, readwrite) BOOL hasDstType;
@property(nonatomic, readwrite) MessageType type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

@property(nonatomic, readwrite) int32_t imageWidth;

@property(nonatomic, readwrite) BOOL hasImageWidth;
@property(nonatomic, readwrite) int32_t imageHeight;

@property(nonatomic, readwrite) BOOL hasImageHeight;
/** ms */
@property(nonatomic, readwrite) int32_t audioDuration;

@property(nonatomic, readwrite) BOOL hasAudioDuration;
@property(nonatomic, readwrite) int64_t createdAt;

@property(nonatomic, readwrite) BOOL hasCreatedAt;
@end

#pragma mark - PushMsg

typedef GPB_ENUM(PushMsg_FieldNumber) {
  PushMsg_FieldNumber_Id_p = 1,
  PushMsg_FieldNumber_Cid = 2,
  PushMsg_FieldNumber_Pmt = 3,
  PushMsg_FieldNumber_Title = 4,
  PushMsg_FieldNumber_Content = 5,
  PushMsg_FieldNumber_Args = 6,
};

GPB_FINAL @interface PushMsg : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *cid;
/** Test to see if @c cid has been set. */
@property(nonatomic, readwrite) BOOL hasCid;

@property(nonatomic, readwrite) PushMsgType pmt;

@property(nonatomic, readwrite) BOOL hasPmt;
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;
/** Test to see if @c title has been set. */
@property(nonatomic, readwrite) BOOL hasTitle;

@property(nonatomic, readwrite, copy, null_resettable) NSString *content;
/** Test to see if @c content has been set. */
@property(nonatomic, readwrite) BOOL hasContent;

@property(nonatomic, readwrite, copy, null_resettable) NSString *args;
/** Test to see if @c args has been set. */
@property(nonatomic, readwrite) BOOL hasArgs;

@end

#pragma mark - FcToken

typedef GPB_ENUM(FcToken_FieldNumber) {
  FcToken_FieldNumber_URL = 1,
  FcToken_FieldNumber_AwsaccessKeyId = 2,
  FcToken_FieldNumber_Acl = 3,
  FcToken_FieldNumber_SuccessActionStatus = 4,
  FcToken_FieldNumber_Policy = 5,
  FcToken_FieldNumber_Signature = 6,
  FcToken_FieldNumber_Key = 7,
};

GPB_FINAL @interface FcToken : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;
/** Test to see if @c URL has been set. */
@property(nonatomic, readwrite) BOOL hasURL;

@property(nonatomic, readwrite, copy, null_resettable) NSString *awsaccessKeyId;
/** Test to see if @c awsaccessKeyId has been set. */
@property(nonatomic, readwrite) BOOL hasAwsaccessKeyId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *acl;
/** Test to see if @c acl has been set. */
@property(nonatomic, readwrite) BOOL hasAcl;

@property(nonatomic, readwrite) int32_t successActionStatus;

@property(nonatomic, readwrite) BOOL hasSuccessActionStatus;
@property(nonatomic, readwrite, copy, null_resettable) NSString *policy;
/** Test to see if @c policy has been set. */
@property(nonatomic, readwrite) BOOL hasPolicy;

@property(nonatomic, readwrite, copy, null_resettable) NSString *signature;
/** Test to see if @c signature has been set. */
@property(nonatomic, readwrite) BOOL hasSignature;

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@end

#pragma mark - FileInfo

typedef GPB_ENUM(FileInfo_FieldNumber) {
  FileInfo_FieldNumber_Id_p = 1,
  FileInfo_FieldNumber_Name = 2,
  FileInfo_FieldNumber_URL = 3,
  FileInfo_FieldNumber_AccountId = 4,
  FileInfo_FieldNumber_Size = 5,
  FileInfo_FieldNumber_CreatedAt = 6,
  FileInfo_FieldNumber_UpdatedAt = 7,
  FileInfo_FieldNumber_ExpireAt = 8,
  FileInfo_FieldNumber_Path = 9,
  FileInfo_FieldNumber_Key = 10,
};

GPB_FINAL @interface FileInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;
/** Test to see if @c URL has been set. */
@property(nonatomic, readwrite) BOOL hasURL;

@property(nonatomic, readwrite, copy, null_resettable) NSString *accountId;
/** Test to see if @c accountId has been set. */
@property(nonatomic, readwrite) BOOL hasAccountId;

@property(nonatomic, readwrite) int64_t size;

@property(nonatomic, readwrite) BOOL hasSize;
@property(nonatomic, readwrite) int64_t createdAt;

@property(nonatomic, readwrite) BOOL hasCreatedAt;
@property(nonatomic, readwrite) int64_t updatedAt;

@property(nonatomic, readwrite) BOOL hasUpdatedAt;
@property(nonatomic, readwrite) int64_t expireAt;

@property(nonatomic, readwrite) BOOL hasExpireAt;
@property(nonatomic, readwrite, copy, null_resettable) NSString *path;
/** Test to see if @c path has been set. */
@property(nonatomic, readwrite) BOOL hasPath;

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@end

#pragma mark - RoomsMobileNotify

typedef GPB_ENUM(RoomsMobileNotify_FieldNumber) {
  RoomsMobileNotify_FieldNumber_Name = 1,
  RoomsMobileNotify_FieldNumber_Mobile = 2,
  RoomsMobileNotify_FieldNumber_State = 3,
};

GPB_FINAL @interface RoomsMobileNotify : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *mobile;
/** Test to see if @c mobile has been set. */
@property(nonatomic, readwrite) BOOL hasMobile;

@property(nonatomic, readwrite) int64_t state;

@property(nonatomic, readwrite) BOOL hasState;
@end

#pragma mark - RoomsLogAddNotify

typedef GPB_ENUM(RoomsLogAddNotify_FieldNumber) {
  RoomsLogAddNotify_FieldNumber_Name = 1,
  RoomsLogAddNotify_FieldNumber_Id_p = 2,
  RoomsLogAddNotify_FieldNumber_State = 3,
};

GPB_FINAL @interface RoomsLogAddNotify : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite) int64_t state;

@property(nonatomic, readwrite) BOOL hasState;
@end

#pragma mark - RoomsUpgradeFileNotify

typedef GPB_ENUM(RoomsUpgradeFileNotify_FieldNumber) {
  RoomsUpgradeFileNotify_FieldNumber_Name = 1,
  RoomsUpgradeFileNotify_FieldNumber_Id_p = 2,
  RoomsUpgradeFileNotify_FieldNumber_UpgradeFile = 3,
  RoomsUpgradeFileNotify_FieldNumber_State = 4,
};

GPB_FINAL @interface RoomsUpgradeFileNotify : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *upgradeFile;
/** Test to see if @c upgradeFile has been set. */
@property(nonatomic, readwrite) BOOL hasUpgradeFile;

@property(nonatomic, readwrite) int64_t state;

@property(nonatomic, readwrite) BOOL hasState;
@end

#pragma mark - RoomsOrderPayNotify

typedef GPB_ENUM(RoomsOrderPayNotify_FieldNumber) {
  RoomsOrderPayNotify_FieldNumber_OrderId = 1,
  RoomsOrderPayNotify_FieldNumber_Name = 2,
  RoomsOrderPayNotify_FieldNumber_Id_p = 3,
  RoomsOrderPayNotify_FieldNumber_State = 4,
};

GPB_FINAL @interface RoomsOrderPayNotify : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *orderId;
/** Test to see if @c orderId has been set. */
@property(nonatomic, readwrite) BOOL hasOrderId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite) int64_t state;

@property(nonatomic, readwrite) BOOL hasState;
@end

#pragma mark - RoomsRechargeSuccessNotify

typedef GPB_ENUM(RoomsRechargeSuccessNotify_FieldNumber) {
  RoomsRechargeSuccessNotify_FieldNumber_State = 1,
  RoomsRechargeSuccessNotify_FieldNumber_Duration = 2,
};

GPB_FINAL @interface RoomsRechargeSuccessNotify : GPBMessage

@property(nonatomic, readwrite) int32_t state;

@property(nonatomic, readwrite) BOOL hasState;
@property(nonatomic, readwrite) int64_t duration;

@property(nonatomic, readwrite) BOOL hasDuration;
@end

#pragma mark - RoomsInsufficientCapacityNotify

typedef GPB_ENUM(RoomsInsufficientCapacityNotify_FieldNumber) {
  RoomsInsufficientCapacityNotify_FieldNumber_Time = 1,
  RoomsInsufficientCapacityNotify_FieldNumber_Conc = 2,
};

GPB_FINAL @interface RoomsInsufficientCapacityNotify : GPBMessage

@property(nonatomic, readwrite) int64_t time;

@property(nonatomic, readwrite) BOOL hasTime;
@property(nonatomic, readwrite) int64_t conc;

@property(nonatomic, readwrite) BOOL hasConc;
@end

#pragma mark - RoomsShowAddNotify

typedef GPB_ENUM(RoomsShowAddNotify_FieldNumber) {
  RoomsShowAddNotify_FieldNumber_Id_p = 1,
  RoomsShowAddNotify_FieldNumber_ShowId = 2,
  RoomsShowAddNotify_FieldNumber_ShowType = 3,
  RoomsShowAddNotify_FieldNumber_CorpPublishRecordId = 4,
  RoomsShowAddNotify_FieldNumber_CorpId = 5,
};

GPB_FINAL @interface RoomsShowAddNotify : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *showId;
/** Test to see if @c showId has been set. */
@property(nonatomic, readwrite) BOOL hasShowId;

@property(nonatomic, readwrite) int64_t showType;

@property(nonatomic, readwrite) BOOL hasShowType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *corpPublishRecordId;
/** Test to see if @c corpPublishRecordId has been set. */
@property(nonatomic, readwrite) BOOL hasCorpPublishRecordId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *corpId;
/** Test to see if @c corpId has been set. */
@property(nonatomic, readwrite) BOOL hasCorpId;

@end

#pragma mark - RoomsShowDeleteNotify

typedef GPB_ENUM(RoomsShowDeleteNotify_FieldNumber) {
  RoomsShowDeleteNotify_FieldNumber_Id_p = 1,
  RoomsShowDeleteNotify_FieldNumber_ShowId = 2,
  RoomsShowDeleteNotify_FieldNumber_ShowType = 3,
  RoomsShowDeleteNotify_FieldNumber_CorpPublishRecordId = 4,
  RoomsShowDeleteNotify_FieldNumber_CorpId = 5,
};

GPB_FINAL @interface RoomsShowDeleteNotify : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *showId;
/** Test to see if @c showId has been set. */
@property(nonatomic, readwrite) BOOL hasShowId;

@property(nonatomic, readwrite) int64_t showType;

@property(nonatomic, readwrite) BOOL hasShowType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *corpPublishRecordId;
/** Test to see if @c corpPublishRecordId has been set. */
@property(nonatomic, readwrite) BOOL hasCorpPublishRecordId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *corpId;
/** Test to see if @c corpId has been set. */
@property(nonatomic, readwrite) BOOL hasCorpId;

@end

#pragma mark - RoomsCorpChangeNotify

typedef GPB_ENUM(RoomsCorpChangeNotify_FieldNumber) {
  RoomsCorpChangeNotify_FieldNumber_Id_p = 1,
  RoomsCorpChangeNotify_FieldNumber_CorpId = 2,
};

GPB_FINAL @interface RoomsCorpChangeNotify : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *corpId;
/** Test to see if @c corpId has been set. */
@property(nonatomic, readwrite) BOOL hasCorpId;

@end

#pragma mark - RoomsNameUpdateNotify

typedef GPB_ENUM(RoomsNameUpdateNotify_FieldNumber) {
  RoomsNameUpdateNotify_FieldNumber_Id_p = 1,
  RoomsNameUpdateNotify_FieldNumber_Nickname = 2,
  RoomsNameUpdateNotify_FieldNumber_State = 3,
};

GPB_FINAL @interface RoomsNameUpdateNotify : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *nickname;
/** Test to see if @c nickname has been set. */
@property(nonatomic, readwrite) BOOL hasNickname;

@property(nonatomic, readwrite) int64_t state;

@property(nonatomic, readwrite) BOOL hasState;
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
